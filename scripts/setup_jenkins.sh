#!/bin/bash
if [ "x$WKDIR" = "x" ]; then
  export WKDIR=$PWD
fi
CI_CONTAINER_NAME="blueocean"
CI_IMAGE="mtyler/blueocean"
CONTAINER_VOLUME="jenkins-data"
DOT_CHEF_DIR="/var/chef/.chef"
BUILD_CONTEXT="/scripts"
JENKINS_HOME="/var/jenkins_home"
ADMIN_USR="admin"
ADMIN_PWD="nimda"
GITHUB_TOKEN="$(cat $WKDIR/github-token)"

#
# create an initialization script to create admin user and turn off startup wizard
#
create_basic-setup-groovy() {
    cat > $WKDIR$BUILD_CONTEXT/basic-setup.groovy <<EOL
#!groovy
//
// This script is generated by setup_jenkins.#!/bin/sh
// it is meant to run on the Jenkins server to create a user
//
import hudson.security.*
import jenkins.install.InstallState
import com.cloudbees.hudson.plugins.folder.AbstractFolderProperty;
import hudson.model.Item;
import hudson.model.User;
import jenkins.model.*
import jenkins.model.Jenkins;
import com.cloudbees.plugins.credentials.domains.Domain;
import com.cloudbees.plugins.credentials.domains.DomainSpecification;
import com.cloudbees.plugins.credentials.CredentialsStore;
import com.cloudbees.plugins.credentials.CredentialsProvider;
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl;
import com.cloudbees.plugins.credentials.common.StandardCredentials;
import com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials;
import io.jenkins.blueocean.rest.impl.pipeline.credential.BlueOceanCredentialsProvider;
import io.jenkins.blueocean.rest.impl.pipeline.credential.BlueOceanDomainSpecification;
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject;

def out
def config = new HashMap()
def bindings = getBinding()
config.putAll(bindings.getVariables())
out = config['out']
out.println "--> Begin basic-setup.groovy"

def instance = Jenkins.getInstance()

out.println "--> creating local user '${ADMIN_USR}'"
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount('${ADMIN_USR}', '${ADMIN_PWD}')
instance.setSecurityRealm(hudsonRealm)

def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
strategy.setAllowAnonymousRead(false)
instance.setAuthorizationStrategy(strategy)

// enable the use of jenkins-cli.jar
instance.CLI.get().setEnabled(true)

instance.save()

out.println "--> instance saved"
////
//// This script is generated by setup_jenkins.
//// it is meant to run on the Jenkins server to add github access tokens
//// to a user
////
//
//// the following has been lifted and modified from the blueocean tests.
//// see: https://github.com/jenkinsci/blueocean-plugin/blob/6e088a00299997899307914e9ae9bc92f22fecf1/blueocean-github-pipeline/src/test/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubPipelineCreateRequestTest.java
//
//User user = instance.getUser('${ADMIN_USR}')
//out.println "--> user id " + user.getId()
////add username password credential to user's credential store in user domain and in USER scope
////User user = login();
//CredentialsStore store=null;
//for(CredentialsStore s: CredentialsProvider.lookupStores(user)){
//    if(s.hasPermission(CredentialsProvider.CREATE) && s.hasPermission(CredentialsProvider.UPDATE)){
//        store = s;
//        break;
//    }
//}
//
//if ( store == null ) {
//  store = CredentialsProvider.;
//}
//store.addDomain(new Domain("github-domain",
//        "Github Domain to store personal access token",
//        Collections.<DomainSpecification>singletonList(new BlueOceanDomainSpecification())));
//
//Domain domain = store.getDomainByName("github-domain");
//StandardUsernamePasswordCredentials credential = new UsernamePasswordCredentialsImpl(CredentialsScope.USER,
//        "github", "Github Access Token", user.getId(), "${GITHUB_TOKEN}");
//store.addCredentials(domain, credential);
//
////create another credentials with same id in system store with different description
//for(CredentialsStore s: CredentialsProvider.lookupStores(Jenkins.getInstance())){
//    s.addCredentials(Domain.global(), new UsernamePasswordCredentialsImpl(CredentialsScope.USER,
//            "github", "System Github Access Token", user.getId(), "${GITHUB_TOKEN}"));
//}
//
//WorkflowMultiBranchProject mp = j.jenkins.createProject(WorkflowMultiBranchProject.class, "demo");
//AbstractFolderProperty prop = new BlueOceanCredentialsProvider.FolderPropertyImpl(user.getId(), credential.getId(),
//        BlueOceanCredentialsProvider.createDomain("https://api.github.com"));
//
//mp.addProperty(prop);
//
//// lookup for created credential id in system store, it should resolve to previously created user store credential
//StandardCredentials c = Connector.lookupScanCredentials((Item)mp, "https://api.github.com", credential.getId());
//out.println "--> credentials " + c.getDescription()
EOL
}

##
## useful things for creating xml
## credentials docs: https://github.com/jenkinsci/credentials-plugin/blob/master/docs/user.adoc
## java -jar jenkins-cli.jar -auth admin:pwd -s http://localhost:8080/ list-credentials user::user::admin
## java -jar jenkins-cli.jar -auth admin:pwd -s http://localhost:8080/ list-credentials-as-xml user::user::admin

create_github-credentials() {
    cat > $WKDIR$BUILD_CONTEXT/github-credentials.xml <<EOL
  <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
    <scope>USER</scope>
    <id>github</id>
    <description>GitHub Access Token</description>
    <username>${ADMIN_USER}</username>
    <password>
      ${GITHUB_TOKEN}
    </password>
  </com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
EOL
}

## helpful cli command to get xml
## java -jar ./jenkins-cli.jar -auth admin:nimda -s http://localhost:8080/ get-credentials-domain-as-xml user::user::admin blueocean-github-domain
##
create_blueocean-github-domain() {
    cat > $WKDIR$BUILD_CONTEXT/blueocean-github-domain.xml <<EOL
    <com.cloudbees.plugins.credentials.domains.Domain plugin="credentials@2.1.18">
      <name>blueocean-github-domain</name>
      <description>blueocean-github-domain to store credentials by BlueOcean</description>
      <specifications>
        <io.jenkins.blueocean.rest.impl.pipeline.credential.BlueOceanDomainSpecification plugin="blueocean-pipeline-scm-api@1.7.1"/>
      </specifications>
    </com.cloudbees.plugins.credentials.domains.Domain>
EOL
}
#
# scripts required for Docker build
#
create_last-exec-version() {
    cat > $WKDIR$BUILD_CONTEXT/jenkins.install.InstallUtil.lastExecVersion <<EOL
2.121.2
EOL
}

create_upgrade-wizard-state() {
    cat > $WKDIR$BUILD_CONTEXT/jenkins.install.UpgradeWizard.state <<EOL
2.121.2
EOL
}

create_location-configuration() {
    cat > $WKDIR$BUILD_CONTEXT/jenkins.model.JenkinsLocationConfiguration.xml <<EOL
<?xml version='1.1' encoding='UTF-8'?>
<jenkins.model.JenkinsLocationConfiguration>
 <jenkinsUrl>http://localhost:8080/</jenkinsUrl>
</jenkins.model.JenkinsLocationConfiguration>
EOL
}

#
# copy knife and pem file to scripts to minimize the size of Docker build context
#
cp $WKDIR/.chef/cicdsvc-knife.rb $WKDIR$BUILD_CONTEXT/knife.rb
cp $WKDIR/.chef/cicdsvc.pem $WKDIR$BUILD_CONTEXT/client.pem

# ---------------------------------------------------------------------------
# cleanup any previous images and volumes
# uncomment this block to keep docker clean. helpful when running a lot
#
echo "calling docker stop $CI_CONTAINER_NAME..."
docker stop $CI_CONTAINER_NAME
docker rm -f $CI_CONTAINER_NAME
docker image prune -f
echo "calling docker volume rm $CONTAINER_VOLUME..."
docker volume rm $CONTAINER_VOLUME
#
# ---------------------------------------------------------------------------

# ---
# Begin working with a custom Dockerfile that should be in
# the same directory as this
#
create_basic-setup-groovy
create_last-exec-version
create_upgrade-wizard-state
create_location-configuration

echo "calling docker build -t $CI_IMAGE"
docker build -t $CI_IMAGE \
             --build-arg KNIFE_RB=cicdsvc-knife.rb \
             --build-arg CLIENT_KEY=cicdsvc.pem \
             $WKDIR$BUILD_CONTEXT

if [ ! $? -eq 0 ]; then
  echo ""
  echo "Error: Docker build failed"
  exit 1
fi

echo "calling docker run..."
docker run -u root --rm -d -p 8080:8080 -p 50000:50000 \
           --dns 192.168.1.1 \
           --add-host chef-server.test:192.168.33.200 \
           -v $CONTAINER_VOLUME:$JENKINS_HOME \
           -v /var/run/docker.sock:/var/run/docker.sock \
           --name $CI_CONTAINER_NAME $CI_IMAGE

if [ ! $? -eq 0 ]; then
  echo ""
  echo "Error: Docker run failed"
  exit 1
fi



#### TODO add github token directly to cat ./users/admin/config.xml

#
# wait for the service to be available before moving on
#

## --------------------------------------------------------------------
## Uncomment this while block to only start the container.
## the startup token will be printed to the console when it's available.
## The basic-setup.groovy script will need to be commented out to avoid
## creation of the admin
#echo ""
#echo "Jenkins starting..."
#while true; do
#  # wait for unlock token to be available
#  docker exec -it $CI_CONTAINER_NAME cat $JENKINS_HOME/secrets/initialAdminPassword > /dev/null 2>&1
#  if [ $? -eq 0 ]; then
#    echo "Jenkins started on http://localhost:8080"
#    echo "Startup password is:"
#    echo $(docker exec -it "$CI_CONTAINER_NAME" cat $JENKINS_HOME/secrets/initialAdminPassword)
#    break
#  else
#    echo "..."
#    sleep 3
#  fi
#done
##
## End of commented functionality
## ----------------------------------------------------------------------

## ----------------------------------------------------------------------
## Begin creating a job
## BluePipeline seems to be the main object https://github.com/jenkinsci/blueocean-plugin/blob/master/blueocean-rest/src/main/java/io/jenkins/blueocean/rest/model/BluePipeline.java
## To create that I think we need to use https://github.com/jenkinsci/blueocean-plugin/blob/master/blueocean-github-pipeline/src/main/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubPipelineCreateRequest.java

#for i in $(seq 1 10); do
#  curl -v --silent http://localhost:8080
#  sleep 3
#done
for i in $(seq 1 10); do
  curl -u $ADMIN_USR:$ADMIN_USR -s http://localhost:8080/user/$ADMIN_USR
  if [ $? -eq 0 ]; then
    echo "$ADMIN_USR found."
    break
  fi
  echo "$ADMIN_USR not created retry in 3..."
  sleep 3
done


while true; do
  # wait for service to be available
  ### if [ "$(curl -v --silent http://localhost:8080 2>&1 | grep 'Authentication required')" = "Authentication required" ]; then
  if [ "$(curl -v --silent http://localhost:8080 2>&1 | grep 'Connected to localhost')" = "Connected to localhost" ]; then
    echo "..."
    sleep 3
  else
    # install plugins
    # docker exec -it "$CI_CONTAINER_NAME" /usr/local/bin/install-plugins.sh < $JENKINS_HOME/plugins.txt
    # create admin user
    # docker exec -u jenkins -it "$CI_CONTAINER_NAME" echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount("$ADMIN_USR", "$ADMIN_PWD")' | java -jar $JENKINS_HOME/war/WEB-INF/jenkins-cli.jar -auth admin:$pwd -s http://172.17.0.1:8080/ groovy =
    # disable startup wizard
    # docker exec -u jenkins -it "$CI_CONTAINER_NAME" echo 'jenkins.install.InstallState.INITIAL_SETUP_COMPLETED.initializeState()' | java -jar $JENKINS_HOME/war/WEB-INF/jenkins-cli.jar -auth $ADMIN_USR:$ADMIN_PWD -s http://172.17.0.1:8080/ groovy =
###    curl -s -XPOST 'http://localhost:8080/createItem?name=chef-infra-base' --data-binary @config.xml -H "Content-Type:text/xml" --user $ADMIN_USR:$ADMIN_PWD
    # run commands locally for initial server setup
    while true; do
      curl --fail http://localhost:8080/jnlpJars/jenkins-cli.jar --output jenkins-cli.jar && break ||
      echo "Download failed for jenkins-cli.jar
            retrying..." && sleep 3
    done

    echo "client downloaded..."
    create_github-credentials
    create_blueocean-github-domain
    java -jar ./jenkins-cli.jar -s http://localhost:8080/ who-am-i --username $ADMIN_USR --password $ADMIN_PWD
    echo "java -jar ./jenkins-cli.jar -auth $ADMIN_USR:$ADMIN_PWD -s http://localhost:8080/ create-credentials-domain-by-xml user::user::$ADMIN_USR < $WKDIR$BUILD_CONTEXT/github-domain.xml"
    java -jar ./jenkins-cli.jar -auth $ADMIN_USR:$ADMIN_PWD -s http://localhost:8080/ create-credentials-domain-by-xml user::user::$ADMIN_USR < $WKDIR$BUILD_CONTEXT/blueocean-github-domain.xml
    java -jar ./jenkins-cli.jar -auth $ADMIN_USR:$ADMIN_PWD -s http://localhost:8080/ create-credentials-by-xml user::user::$ADMIN_USR blueocean-github-domain < $WKDIR$BUILD_CONTEXT/github-credentials.xml


##    java -jar ./jenkins-cli.jar -auth $ADMIN_USR:$ADMIN_PWD -s http://localhost:8080/ help
#    java -jar ./jenkins-cli.jar -auth admin:$pwd -s http://localhost:8080/ groovy 'jenkins.model.Jenkins.instance.securityRealm.createAccount("$ADMIN_USR", "$ADMIN_PWD")'
    echo "Jenkins started on localhost:8080"
    echo "Startup credentials user: $ADMIN_USR pwd: $ADMIN_PWD"
    break
  fi
done

exit 0
