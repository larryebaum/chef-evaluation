#!/bin/bash
# Author: Mike Tyler - mtyler - mtyler@chef.io
# Purpose: Stand up an Automate v2.0 evaluation environment

#
# include helper functions
#
. helpers.sh
#
# setup some vars
#
PROFILE_NAME="admin/cis-ubuntu16.04lts-level1-server"
PROFILE_VER="1.0.0-4"

usage() {
  echo "Usage: $0 [Sub Command] [options]"
  echo ""
  echo "Available Sub Commands:"
  echo "    setup | backup | log | restore | teardown | write"
  echo ""
  echo "  options:"
  echo "  -h,--help    show this message"
  echo ""
  echo "backup: create snapshots of Automate and Chef Server"
  echo ""
  echo "log: tail the Automate log"
  echo ""
  echo "restore: Restore to the latest backup, if one exists"
  echo "  options:"
  echo "  -a, --automate Directory in ./bkps/a2 containing Automate backup (default: latest modified)"
  echo "  -k, --keys Directory in ./bkps/keys containing backup of keys (default: latest modified)"
  echo "  -s, --server Directory in ./bkps/srvr containing Chef Server backup (default: latest modified)"
  echo ""
  echo "setup: Creat a local Chef Infrastructure"
  echo ""
  echo "  options:"
  echo "  -c, --count Number of nodes to create (integer, default: 2)"
  echo "  -b, --builder add an on-prem builder"
  echo "  -p, --pipeline add a cicd cookbook pipeline"
  echo "  -w, --workstation add a chef workstation"
  echo "  -x exclude infrastructure (Automate, Server, Nodes)"
  echo ""
  echo "teardown: Remove files and objects created"
  echo "  options:"
  echo "  -b,--backup  Create a backup before tearing down. Pointless to use with -f"
  echo "  -f,--full    Remove .deb packages. The process downloads and creates .deb"
  echo "               packages. For convienience and speed, these are not removed"
  echo "               by default."
  echo "  -p,--pretend just list what will be done"
  echo "  -y,--yes     answer yes to all prompts"
  echo ""
  echo "troubleshoot: Print useful cmds"
  echo ""
  echo "write: Create/overwrite local files: Vagrantfile,"
  echo "              knife.rb, base.rb, etc."


  exit 0;
}
#
# create base role
# This functionality was put in a role for simplicity, in a production scenario
# consider using a wrapper cookbook.
create_base_rb() {
    mkdir -p $WKDIR/roles && cat > $WKDIR/roles/base.rb <<EOL
name "base"
description "baseline config"
run_list(
  "recipe[audit::default]"
)
default_attributes(
  "audit": {
    "reporter": "chef-server-automate",
    "profiles": [
      {
        "name": "DevSec Linux Security Baseline",
        "compliance": "admin/linux-baseline"
      }
    ]
  }
)
EOL
}
#
# create local knife config
#
create_knife_rb() {
    mkdir -p $WKDIR/.chef && cat > $WKDIR/.chef/knife.rb <<EOL
current_dir = File.dirname(__FILE__)
node_name                "admin"
client_key               "../.chef/admin.pem"
validation_client_name   "a2-validator"
validation_key           "../.chef/a2-validator.pem"
chef_server_url          "https://chef-server.test/organizations/a2"
cookbook_path            ["#{current_dir}/../cookbooks"]
EOL
}
#
# create Vagrantfile
#
create_vagrantfile() {
    cat > $WKDIR/Vagrantfile <<EOL
# -*- mode: ruby -*-
# vi: set ft=ruby :

# this is set high to give some flexiblity.
# ideally this would be passed from an environment var
NODE_COUNT = 10

Vagrant.configure(2) do |config|

  config.vm.define :a2 do |a2|
    a2.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 2
    end
    a2.vm.box = "bento/ubuntu-16.04"
# TODO find a more restricted way to give the hab user write access to bkps/a2/*
    a2.vm.synced_folder ".", "${GUEST_WKDIR}", create: true, mount_options: ["dmode=777,fmode=777"]
    a2.vm.hostname = 'automate-deployment.test'
    a2.vm.network 'private_network', ip: '192.168.33.199'
    a2.vm.boot_timeout = 600
    a2.vm.provision "shell", inline: "${GUEST_WKDIR}/tmp/a2_vm_provision.sh /opt/a2-testing"
  end

  config.vm.define :srvr do |srvr|
    srvr.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 2
    end
    srvr.vm.box = "bento/ubuntu-16.04"
    srvr.vm.hostname = "chef-server.test"
    srvr.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    srvr.vm.network :private_network, ip: "192.168.33.200"
    srvr.ssh.username = "vagrant"
    srvr.ssh.password = "vagrant"
    srvr.vm.provision "shell", inline: "${GUEST_WKDIR}/tmp/srvr_vm_provision.sh /opt/a2-testing"
  end

  NODE_COUNT.times do |i|
    node_id = "node1#{i}"
    config.vm.define node_id do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.memory = 512
        vb.cpus = 2
      end
      node.vm.box = "bento/ubuntu-16.04"
      node.vm.hostname = "#{node_id}.test"
      node.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
      node.vm.network :private_network, ip: "192.168.33.1#{i}"
      node.ssh.username = "vagrant"
      node.ssh.password = "vagrant"
      node.vm.provision "shell", inline: "${GUEST_WKDIR}/tmp/node_vm_provision.sh /opt/a2-testing #{i}"
    end
  end

  config.vm.define :work do |work|
    work.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 2
    end
    work.vm.box = "bento/ubuntu-16.04"
    work.vm.hostname = "workstation.test"
    work.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    work.vm.network :private_network, ip: "192.168.33.198"
    work.ssh.username = "vagrant"
    work.ssh.password = "vagrant"
    work.vm.provision "shell", inline: "${GUEST_WKDIR}/tmp/work_vm_provision.sh"
  end

  config.vm.define :bldr do |bldr|
    bldr.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 2
    end
    bldr.vm.box = "bento/ubuntu-16.04"
    bldr.vm.hostname = "bldr.test"
    bldr.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    bldr.vm.network :private_network, ip: "192.168.33.197"
    bldr.ssh.username = "vagrant"
    bldr.ssh.password = "vagrant"
    bldr.vm.provision "shell", inline: "${GUEST_WKDIR}/tmp/bldr_vm_provision.sh"
  end

  config.vm.define :cicd do |cicd|
    cicd.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 2
    end
    cicd.vm.box = "bento/ubuntu-16.04"
    cicd.vm.hostname = "cicd.test"
    cicd.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    cicd.vm.network :private_network, ip: "192.168.33.196"
    cicd.ssh.username = "vagrant"
    cicd.ssh.password = "vagrant"
    cicd.vm.provision "shell", inline: "${GUEST_WKDIR}/tmp/cicd_vm_provision.sh"
  end
end
EOL
}

create_helpers() {
  cat > rm-node <<EOL
#!/bin/bash
if [ "\$1" == "" ] ;
then
  echo "Specify a node name"
  exit
fi
knife node delete \$1
knife client delete \$1
vagrant destroy \$1 -f
EOL
  chmod +x rm-node
}

do_build_recreate() {
  echo "Recreating knife.rb..."
  create_knife_rb
  echo "Recreating roles/base.rb..."
  create_base_rb
  echo "Recreating Vagrantfile..."
  create_vagrantfile 2>/dev/null
}

do_build() {
  echo "Creating local files..."
  if [ -f $WKDIR/.chef/knife.rb ] ; then
    echo "knife.rb exists.  Nothing to do here."
  else
    echo "Creating knife.rb..."
    create_knife_rb
    sed -e s/admin/cicdsvc/g $WKDIR/.chef/knife.rb > $WKDIR/.chef/cicdsvc-knife.rb
  fi
  if [ -f $WKDIR/roles/base.rb ] ; then
    echo "base.rb exists.  Nothing to do here."
  else
    echo "Creating roles/base.rb..."
    create_base_rb
  fi
  if [ -f $WKDIR/Vagrantfile ] ; then
    echo "Vagrantfile exists.  Nothing to do here."
  else
    echo "Creating Vagrantfile..."
    create_vagrantfile 2>/dev/null
  fi
  echo "Local files complete."
}
#
# set up managed nodes
# $1 = node count
setup_nodes() {
  echo "Setting up managed nodes..."
  mkdir -p $WKDIR/tmp
  cp $WKDIR/scripts/setup_node.sh $WKDIR/tmp/node_vm_provision.sh
  chmod +x $WKDIR/tmp/node_vm_provision.sh

  for (( i=0; i<$1; i++ ))
  do
    if [ "$(vagrant status node1$i | grep 'running (virtualbox)')" == "" ];
    then
      vagrant up node1$i >/dev/tty 2>&1
    else
      echo "node1$i is running. Nothing to do here."
    fi
    add_host 192.168.33.1$i node1$i.test
  done
  echo "Managed nodes set up complete."
}
#
# Begin setup
# the purpose of this file is to be the entry point for setting up a
# local test/evaluation environment for Chef Automate v2
#
setup_infra() {
  echo "Begin Chef Infrastructure setup..."
  # create files
  # add chef dir
  mkdir -p $WKDIR/.chef
  mkdir -p $WKDIR/logs
  mkdir -p $WKDIR/tmp
  cp $WKDIR/scripts/setup_automate.sh $WKDIR/tmp/a2_vm_provision.sh && chmod +x $WKDIR/tmp/a2_vm_provision.sh
  cp $WKDIR/scripts/setup_server.sh $WKDIR/tmp/srvr_vm_provision.sh && chmod +x $WKDIR/tmp/srvr_vm_provision.sh

  do_build
  echo "Setting up Automate and Chef Server..."
  # Check status of Automate
  a2_mode='provision'
  if [ "$(vagrant status a2 | grep 'running (virtualbox)')" == "" ]; then a2_mode='up' ; fi
  # Check status of Chef Server
  srvr_mode='provision'
  if [ "$(vagrant status srvr | grep 'running (virtualbox)')" == "" ]; then srvr_mode='up' ; fi
  # clean up any last_run leftovers that will get in the way
  pids=""
  i=0
  # a2-token is written out by a successful a2 installation
  if [ ! -f $WKDIR/a2-token ] ; then
    vagrant $a2_mode a2 >/dev/tty 2>&1 &
    pids[$i]=$!
    i=$i+1
  fi
  vagrant $srvr_mode srvr >/dev/tty 2>&1 &
  pids[$i]=$!
  # wait for all pids
  for pid in ${pids[*]}; do
    wait $pid
  done
  if [ ! -f $WKDIR/a2-token ] ; then do_error "a2-token doesn't exist"; fi
  add_host 192.168.33.200 chef-server.test
  add_host 192.168.33.199 automate-deployment.test
  echo "Automate and Chef Server set up complete."

  echo "Make compliance profiles available..."
  # This is an API call to Automate to make baseline profile available with an
  curl -d '{"name": "${PROFILE_NAME}", "version": "${PROFILE_VER}"}' -H "Content-Type: application/json" -H "api-token: $(<./a2-token)" -X POST 'https://automate-deployment.test/api/v0/compliance/profiles?owner=admin' --insecure
  #TODO check for error and print helpful message
  echo "Configure Automate for backups"
  # configure automate to keep backups in the shared directory
#  vagrant ssh a2 -c "if [ ! -f backup_config.toml ]; then sudo printf \"[global.v1.backups.filesystem]\npath = '${GUEST_WKDIR}/bkps/a2'\n\" > backup_config.toml && sudo ./chef-automate config patch backup_config.toml; fi"
# # Attempt to work around the inability to restore from ^^ backup shared dir location set ^^ above
#  vagrant ssh a2 -c "if [ ! -f bak_ln_done ]; then cd /var/opt/chef-automate && sudo mv backups /tmp && sudo ln -s ${GUEST_WKDIR}/bkps/a2 backups && touch /home/vagrant/bak_ln_done; fi"

  echo "Fetch ssl cert from Chef Server..."
  knife ssl fetch
  # upload cookbooks
  do_cookbook_upload $WKDIR "audit"
  # upload roles
  do_roles_upload $WKDIR "base.rb"
  setup_nodes $cnt
  do_infra_test
  # wrap up and repeat the user instructions that are buried in the logs
  echo "*******************************************************************"
  echo ""
  echo "To login to Chef Automate, use the following credentials"
  vagrant ssh a2 -c "sudo cat ./automate-credentials.toml" >/dev/tty 2>&1
  echo ""
  echo "cleanup using chef-infra teardown"
  echo ""
  echo "Chef Infrastructure setup completed."
  echo "*******************************************************************"
}

setup_workstation() {
  mkdir -p $WKDIR/tmp
  cp $WKDIR/scripts/setup_workstation.sh $WKDIR/tmp/work_vm_provision.sh
  chmod +x $WKDIR/tmp/work_vm_provision.sh
  vagrant up work
  add_host workstation.test 192.168.33.198
}

setup_builder() {
  mkdir -p $WKDIR/tmp
  cp $WKDIR/scripts/setup_builder.sh $WKDIR/tmp/bldr_vm_provision.sh
  chmod +x $WKDIR/tmp/bldr_vm_provision.sh
  vagrant up bldr
  add_host builder.test 192.168.33.197
}

setup_cicd() {
  echo ""
  echo ""
  echo ""
  echo "Note! ...  cicd uses the jenkinsci/blueocean docker image"
  echo "PreReqs include:"
  echo "    Docker https://www.docker.com/"
  echo "    Manual configuration of Jenkins https://jenkins.io/projects/blueocean/"
  echo "    A Dockerfile, Jenkinsfile, .kitchen.docker.yml copied and modified"
  echo "    accordingly from https://www.github.com/mtyler/chef-infra-base"
  echo ""
  ### moving jenkins logic to it's own repo
  ### ./scripts/setup_jenkins.sh
  if [ ! -d $WKDIR/tmp ]; then
    mkdir -p $WKDIR/tmp
  fi
  if [ ! -d $WKDIR/tmp/jenkins-cookbook-pipeline ]; then
    echo "Cloning cookbook pipeline..."
    cd $WKDIR/tmp && git clone git://github.com/mtyler/jenkins-cookbook-pipeline.git
  else
    echo "Fetching cookbook pipeline..."
    cd $WKDIR/tmp/jenkins-cookbook-pipeline && git fetch --all && git reset --hard origin/master
  fi
  cp $WKDIR/.chef/cicdsvc-knife.rb $WKDIR/tmp/jenkins-cookbook-pipeline/jenkins-master/cicdsvc-knife.rb
  cp $WKDIR/.chef/cicdsvc.pem $WKDIR/tmp/jenkins-cookbook-pipeline/jenkins-master/cicdsvc.pem
  cp $WKDIR/github-token $WKDIR/tmp/jenkins-cookbook-pipeline/jenkins-master/github-token


  chmod +x $WKDIR/tmp/jenkins-cookbook-pipeline/jenkins-master/setup_jenkins.sh
  $WKDIR/tmp/jenkins-cookbook-pipeline/jenkins-master/setup_jenkins.sh
  if [ ! $? -eq 0 ]; then
    do_error "Something went wrong setting up pipeline"
  fi
  echo ""
  echo "Steps:"
  echo "    1. Navigate to http://localhost:8080/blue"
  echo "    2. Open a shell on the image to get initial password:"
  echo "         docker exec -it jenkins-blueocean bash"
  echo "    3. Fork https://www.github.com/mtyler/chef-infra-base"
  echo "    4. Follow jenkins setup wizard to connect the cookbook"
}

do_backup() {
  echo "Begin taking backups..."
  d=`date '+%Y%m%d%H%M%S'`
  mkdir -p $WKDIR/bkps/srvr
  mkdir -p $WKDIR/bkps/a2
  mkdir -p $WKDIR/bkps/keys
  # backup keys
  mkdir -p $WKDIR/bkps/keys/$d
  cp $WKDIR/.chef/*.pem $WKDIR/bkps/keys/$d
  # backup chef server
  vagrant ssh srvr -c "sudo /opt/opscode/embedded/bin/knife ssl fetch https://chef-server.test && sudo /opt/opscode/embedded/bin/knife ec backup ${GUEST_WKDIR}/bkps/srvr/${d} -s https://chef-server.test --user pivotal --key /etc/opscode/pivotal.pem"
  # configure automate for backup
# # # # # vagrant ssh a2 -c "if [ ! -f backup_config.toml ]; then sudo printf \"[global.v1.backups.filesystem]\npath = '${GUEST_WKDIR}/bkps/a2'\n\" > backup_config.toml && sudo ./chef-automate config patch backup_config.toml; fi"
  # backup automate
  vagrant ssh a2 -c "sudo ./chef-automate backup create"
  # copy files to synced_folder
  vagrant ssh a2 -c "sudo cp -Rfp /var/opt/chef-automate/backups/* $GUEST_WKDIR/bkps/a2  && sudo cp -Rfp /var/opt/chef-automate/backups/automate-elasticsearch-data $GUEST_WKDIR/bkps/a2"
  # keep a copy of the credentials file
  vagrant ssh a2 -c "sudo cat ./automate-credentials.toml > $GUEST_WKDIR/bkps/keys/$d/automate-credentials.toml"


  echo "Backups complete."
}

do_restore() {
  # there is NO validation that the backups are in sync
  # the assumption is that the last modified directories go together

  echo "Begin restore..."
  # check for cli arguments
  if [ "x$keys_bak" = "x" ]; then keys_bak=`ls -tr $WKDIR/bkps/keys | tail -1` ; fi
  if [ "x$srvr_bak" = "x" ]; then srvr_bak=`ls -tr $WKDIR/bkps/srvr | tail -1` ; fi
  if [ "x$a2_bak" = "x" ]; then a2_bak=`ls -tr $WKDIR/bkps/a2 | tail -1` ; fi
  echo "Restoring keys from: ${keys_bak}"
  echo "Restoring Chef Server from: ${srvr_bak}"
  echo "Restoring Automate from: ${a2_bak}"
  # validate backup directories exist
  if [ ! -d $WKDIR/bkps/keys/$keys_bak ]; then do_error "keys do not exist. Look in ${WKDIR}/keys and try again." ; fi
  if [ ! -d $WKDIR/bkps/srvr/$srvr_bak ]; then do_error "Chef Server Backup does not exist. Look in ${WKDIR}/bkps and try again." ; fi
  if [ ! -d $WKDIR/bkps/a2/$a2_bak ]; then do_error "Automate Backup does not exist. Look in ${WKDIR}/bkps and try again." ; fi
  # restore keys
  cp $WKDIR/bkps/keys/$keys_bak/*.pem $WKDIR/.chef
  # restore chef server
  vagrant ssh srvr -c "sudo /opt/opscode/embedded/bin/knife ssl fetch https://chef-server.test && sudo /opt/opscode/embedded/bin/knife ec restore ${GUEST_WKDIR}/bkps/srvr/${srvr_bak} -s https://chef-server.test --user pivotal --key /etc/opscode/pivotal.pem"
  # need to copy the backup files out of the vagrant synced_folder becuase the
  # deployment-service doesn't like
  vagrant ssh a2 -c "sudo cp -Rp $GUEST_WKDIR/bkps/a2/$a2_bak /var/opt/chef-automate/backups && sudo cp -Rp $GUEST_WKDIR/bkps/a2/automate-elasticsearch-data /var/opt/chef-automate/backups"
  # uninstall automate
  vagrant ssh a2 -c "sudo systemctl stop chef-automate && sudo pkill chef-automate"
  vagrant ssh a2 -c "sudo rm -rf /hab"
  vagrant ssh a2 -c "sudo userdel hab"
  # restore automate
  vagrant ssh a2 -c "sudo ./chef-automate backup restore $a2_bak"
  # reset the access_token
  mv $WKDIR/a2-token $WKDIR/a2-token.bak
  vagrant ssh a2 -c "sudo ./chef-automate admin-token > $GUEST_WKDIR/a2-token"
  vagrant ssh srvr -c "sudo chef-server-ctl set-secret data_collector token \$(< $GUEST_WKDIR/a2-token) && sudo chef-server-ctl restart nginx && sudo chef-server-ctl restart opscode-erchef"
  echo ""
  vagrant ssh a2 -c "sudo cat ./automate-credentials.toml"
  echo ""
  echo "Restore complete."
  #TODO redo the token
}

teardown_infra() {
  echo "Begin Chef Infrastructure teardown"
  if $is_pre ; then echo "-p specified. Only printing actions of this script..." ; fi
  echo "create temporary removing dir..."
  if ! $is_pre ; then mkdir -p removing ; fi

  remove_host automate-deployment.test $is_pre
  remove_host chef-server.test $is_pre
  remove_host workstation.test $is_pre
  remove_host builder.test $is_pre

  #TODO remove nodeX.test

  if $is_full ; then
    echo "clear contents of add.license.etc..."
    echo "delete binaries ./chef-dk, *.deb and Backups..."
    if ! $is_pre ; then
      # directory containing compiled archlinux chef-dk package
      mv ./pkgs ./removing
      mv ./bkps ./removing
    fi
    echo "delete helper scripts..."
    if ! $is_pre ; then mv rm-node ./removing ; fi
  fi

  echo "remove token file..."
  if ! $is_pre ; then mv -f a2-token ./removing ; fi
  echo "remove files from .chef..."
  if ! $is_pre ; then mv -f ./.chef ./removing ; fi
  echo "remove ./cookbooks dir..."
  if ! $is_pre ; then mv -f ./cookbooks ./removing ; fi
  echo "remove ./roles dir..."
  if ! $is_pre ; then mv -f ./roles ./removing ; fi
  echo "remove ./bin dir..."
  if ! $is_pre ; then mv -f ./bin ./removing ; fi
  echo "remove ./logs dir..."
  if ! $is_pre ; then mv -f ./logs ./removing ; fi
  echo "remove ./tmp dir..."
  if ! $is_pre ; then mv -f ./tmp ./removing ; fi
  echo "remove bldr.env..."
  if ! $is_pre ; then mv -f bldr.env ./removing ; fi


  # make sure user really wants to delete unless `-y` was specified
  if ! $is_yes ;
  then
    while true; do
      read -p "Do you really want to clean up? (y/n)" yn
      case $yn in
          [Yy]* ) break;;
          [Nn]* )
            echo "Ok. Stopping now."
            if ! $is_pre ; then echo "Recovery can be done manually by moving files out of ./removing" ; fi
            exit;;
          * ) echo "Please answer yes or no.";;
      esac
    done
  fi

  echo "vagrant destroy -f removing these vms..."
  vagrant status >/dev/tty 2>&1
  if ! $is_pre ; then vagrant destroy -f ; fi
  echo "remove Vagrantfile..."
  if ! $is_pre ; then rm -f Vagrantfile ./removing ; fi
  echo "remove ./vagrant dir..."
  if ! $is_pre ; then mv -f ./.vagrant ./removing ; fi
  echo "nuke the temporary ./removing dir..."
  if ! $is_pre ; then rm -rf ./removing ; fi
  echo "removing docker jenkinsci-blueocean image and jenkins-data volume..."
  if ! $is_pre ; then
    docker stop jenkinsci-blueocean
    docker rmi jenkinsci/blueocean
    docker rmi evarga/jenkins-slave
    docker volume rm jenkins-data
  fi
  echo ""
  echo "Teardown of Chef Infrastructure complete. Thanks for playing... :)"
}

do_troubleshoot() {
  echo ""
  echo "Helpful troubleshooting"
  echo ""
  echo "View Automate Log: journalctl -u chef-automate"
  echo "Tail Automate Log: journalctl -u chef-automate -f"
}


#
# Begin chef-infra.sh
#
do_start
# initalize default flags
cnt=2
is_full=false
is_yes=false
is_pre=false
# is builder going to be created?
is_bldr=false
# is workstation going to be created?
is_work=false
# is infrastructure going to be created?
is_infra=true
# is a pipeline going to be created?
is_cicd=false

# parse command line
case $1 in
  setup )
    shift
    while getopts ":c:bpwhx" o; do
      case $o in
        b|builder )
          is_bldr=true
          ;;
        c|count )
          cnt=$OPTARG
          echo "Create $cnt nodes"
          ;;
        h|help )
          usage
          ;;
        p|pipeline )
          is_cicd=true
          ;;
        w|workstation )
          is_work=true
          ;;
        x )
          is_infra=false
          ;;
        * )
          usage
          ;;
      esac
    done
    if [ "$is_infra" = true ]; then setup_infra; fi
    if [ "$is_work" = true ]; then setup_workstation; fi
    if [ "$is_bldr" = true ]; then setup_builder; fi
    if [ "$is_cicd" = true ]; then setup_cicd; fi
    ;;
  backup )
    shift
    do_backup
    ;;
  restore )
    shift
    while getopts ":s:a:h" o; do
      case $o in
        a|automate )
          a2_bak=$OPTARG
          ;;
        k|keys )
          keys_bak=$OPTARG
          ;;
        s|server )
          srvr_bak=$OPTARG
          ;;
        h|help )
          usage
          ;;
        * )
          usage
          ;;
      esac
    done
    do_restore
    ;;
  log )
    vagrant ssh a2 -c 'journalctl -u chef-automate -f'
    ;;
  teardown )
    shift
    while getopts ":bfpyh" o; do
      case $o in
        b|backup )
          do_backup
          ;;
        f|full )
          is_full=true
          ;;
        p|pretend )
          is_pre=true
          ;;
        y|yes )
          is_yes=true
          ;;
        h|help )
          usage
          ;;
        * )
          ;;
      esac
    done
    teardown_infra
    ;;
  troubleshoot )
    do_troubleshoot
    ;;
  test )
    do_test
    ;;
  write )
    do_build_recreate
    ;;
  * )
    usage
    ;;
esac

# all done, call end completion message
do_end
